{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/portfolio/src/components/hangman.js\";\nimport wordArray from \"./words\";\nimport React, { Component } from 'react';\nimport './hangman.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomWord = arr => {\n      let theWord = arr[Math.floor(Math.random() * wordArray.length)];\n      this.setState({\n        theAnswer: theWord\n      });\n    };\n\n    this.handleSubmit = e => {\n      if (this.state.previousGuesses.includes(this.state.currentGuess) === false) {\n        this.setState({\n          previousGuesses: [...this.state.previousGuesses, this.state.currentGuess],\n          alreadyGuessed: false\n        });\n      } else {\n        this.setState({\n          alreadyGuessed: true\n        });\n      }\n\n      this.setState({\n        currentGuess: ''\n      });\n      this.hangmanLogic(this.state.currentGuess);\n      e.preventDefault();\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        currentGuess: e.target.value\n      });\n      console.log(e.target.value);\n    };\n\n    this.hangmanLogic = guess => {\n      if (guess.toLowerCase() === this.state.theAnswer) {\n        this.setState({\n          didWin: true\n        });\n      }\n\n      if (!this.state.displayedCharacters.includes(guess)) {\n        for (let i = 0; i < this.state.theAnswer.length; i++) {\n          if (guess.toLowerCase() === this.state.theAnswer[i]) {\n            let updatedArray = this.state.displayedCharacters;\n            updatedArray[i] = guess.toLowerCase();\n            this.setState({\n              displayedCharacters: [...updatedArray],\n              goodGuess: true\n            });\n            console.log(this.state.displayedCharacters);\n          } else {\n            this.setState({\n              goodGuess: false\n            });\n          }\n        }\n      }\n    };\n\n    this.restart = () => {\n      this.componentDidMount();\n      this.setState({\n        previousGuesses: []\n      });\n    };\n\n    this.state = {\n      displayedCharacters: [],\n      currentGuess: '',\n      previousGuesses: [],\n      alreadyGuessed: false,\n      theAnswer: \"\",\n      didWin: null,\n      goodGuess: null\n    };\n  }\n\n  componentDidMount() {\n    let theWord = wordArray[Math.floor(Math.random() * wordArray.length)];\n    this.setState({\n      theAnswer: theWord\n    });\n    let hangmansWordArray = [...theWord.split(\"\")].map(value => value = \"_ \");\n    this.setState({\n      displayedCharacters: hangmansWordArray\n    });\n  }\n\n  //           Below this line is the return \n  // -----------------------------------------------------------------\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Hey there, you aren't lost are you? Well, if you are, why not play a game?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 10\n      }, this), this.state.displayedCharacters, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Enter your guess:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"\",\n            value: this.state.currentGuess,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.restart,\n        children: \"Click here to restart.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), \"Your previous Guesses\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), this.state.alreadyGuessed ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You already guessed that!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 40\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.previousGuesses.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"pGuesses\",\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hangman;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/portfolio/src/components/hangman.js"],"names":["wordArray","React","Component","Hangman","constructor","props","getRandomWord","arr","theWord","Math","floor","random","length","setState","theAnswer","handleSubmit","e","state","previousGuesses","includes","currentGuess","alreadyGuessed","hangmanLogic","preventDefault","handleChange","target","value","console","log","guess","toLowerCase","didWin","displayedCharacters","i","updatedArray","goodGuess","restart","componentDidMount","hangmansWordArray","split","map","render","index"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,SAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;;;AAGA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC9BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAwBlBC,aAxBkB,GAwBDC,GAAD,IAAS;AACvB,UAAIC,OAAO,GAAGD,GAAG,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcX,SAAS,CAACY,MAAnC,CAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,SAAS,EAAEN;AADC,OAAd;AAGD,KA7BiB;;AAAA,SAgClBO,YAhCkB,GAgCFC,CAAD,IAAO;AACpB,UAAK,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,QAA3B,CAAoC,KAAKF,KAAL,CAAWG,YAA/C,CAAD,KAAmE,KAAvE,EAA8E;AAC5E,aAAKP,QAAL,CAAc;AACZK,UAAAA,eAAe,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,eAAf,EAAgC,KAAKD,KAAL,CAAWG,YAA3C,CADL;AAEZC,UAAAA,cAAc,EAAE;AAFJ,SAAd;AAID,OALD,MAKO;AACL,aAAKR,QAAL,CAAc;AAACQ,UAAAA,cAAc,EAAE;AAAjB,SAAd;AACD;;AACD,WAAKR,QAAL,CAAc;AAACO,QAAAA,YAAY,EAAE;AAAf,OAAd;AACA,WAAKE,YAAL,CAAkB,KAAKL,KAAL,CAAWG,YAA7B;AACAJ,MAAAA,CAAC,CAACO,cAAF;AACD,KA5CiB;;AAAA,SAgDlBC,YAhDkB,GAgDFR,CAAD,IAAO;AACpB,WAAKH,QAAL,CAAc;AAACO,QAAAA,YAAY,EAAEJ,CAAC,CAACS,MAAF,CAASC;AAAxB,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAC,CAACS,MAAF,CAASC,KAArB;AACD,KAnDiB;;AAAA,SAqDlBJ,YArDkB,GAqDFO,KAAD,IAAW;AACxB,UAAIA,KAAK,CAACC,WAAN,OAAwB,KAAKb,KAAL,CAAWH,SAAvC,EAAiD;AAC/C,aAAKD,QAAL,CAAc;AAACkB,UAAAA,MAAM,EAAE;AAAT,SAAd;AACD;;AAED,UAAI,CAAC,KAAKd,KAAL,CAAWe,mBAAX,CAA+Bb,QAA/B,CAAwCU,KAAxC,CAAL,EAAqD;AACnD,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,KAAL,CAAWH,SAAX,CAAqBF,MAAzC,EAAiDqB,CAAC,EAAlD,EAAsD;AACpD,cAAIJ,KAAK,CAACC,WAAN,OAAwB,KAAKb,KAAL,CAAWH,SAAX,CAAqBmB,CAArB,CAA5B,EAAqD;AACnD,gBAAIC,YAAY,GAAG,KAAKjB,KAAL,CAAWe,mBAA9B;AACAE,YAAAA,YAAY,CAACD,CAAD,CAAZ,GAAkBJ,KAAK,CAACC,WAAN,EAAlB;AACA,iBAAKjB,QAAL,CAAc;AACZmB,cAAAA,mBAAmB,EAAE,CAAC,GAAGE,YAAJ,CADT;AAEZC,cAAAA,SAAS,EAAE;AAFC,aAAd;AAIAR,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWe,mBAAvB;AACD,WARD,MAQO;AACL,iBAAKnB,QAAL,CAAc;AACZsB,cAAAA,SAAS,EAAE;AADC,aAAd;AAGD;AACF;AACF;AACF,KA3EiB;;AAAA,SA8ElBC,OA9EkB,GA8ER,MAAM;AACd,WAAKC,iBAAL;AACA,WAAKxB,QAAL,CAAc;AACZK,QAAAA,eAAe,EAAE;AADL,OAAd;AAGD,KAnFiB;;AAEhB,SAAKD,KAAL,GAAa;AACXe,MAAAA,mBAAmB,EAAE,EADV;AAEXZ,MAAAA,YAAY,EAAE,EAFH;AAGXF,MAAAA,eAAe,EAAE,EAHN;AAIXG,MAAAA,cAAc,EAAE,KAJL;AAKXP,MAAAA,SAAS,EAAE,EALA;AAMXiB,MAAAA,MAAM,EAAE,IANG;AAOXI,MAAAA,SAAS,EAAE;AAPA,KAAb;AAUD;;AACDE,EAAAA,iBAAiB,GAAE;AACjB,QAAI7B,OAAO,GAAGR,SAAS,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcX,SAAS,CAACY,MAAnC,CAAD,CAAvB;AACA,SAAKC,QAAL,CAAc;AACZC,MAAAA,SAAS,EAAEN;AADC,KAAd;AAGA,QAAI8B,iBAAiB,GAAG,CAAC,GAAI9B,OAAO,CAAC+B,KAAR,CAAc,EAAd,CAAL,EAAyBC,GAAzB,CAA6Bd,KAAK,IAAIA,KAAK,GAAG,IAA9C,CAAxB;AACA,SAAKb,QAAL,CAAc;AACZmB,MAAAA,mBAAmB,EAAEM;AADT,KAAd;AAGD;;AAgED;AACA;AAEAG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,4GAEG;AAAA;AAAA;AAAA;AAAA,cAFH,EAGG,KAAKxB,KAAL,CAAWe,mBAHd,eAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAME;AAAA;AAAA;AAAA;AAAA,cANF,eASE;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAM,QAAA,QAAQ,EAAE,KAAKjB,YAArB;AAAA,gCACE;AAAA,uDACA;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,EAFP;AAGE,YAAA,KAAK,EAAE,KAAKE,KAAL,CAAWG,YAHpB;AAIE,YAAA,QAAQ,EAAE,KAAKI;AAJjB;AAAA;AAAA;AAAA;AAAA,kBADA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAuBE;AAAA;AAAA;AAAA;AAAA,cAvBF,eAwBE;AAAQ,QAAA,OAAO,EAAE,KAAKY,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF,eAyBE;AAAA;AAAA;AAAA;AAAA,cAzBF,wCA4BE;AAAA;AAAA;AAAA;AAAA,cA5BF,EA6BK,KAAKnB,KAAL,CAAWI,cAAX,gBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5B,GAA+D,IA7BpE,eA8BE;AAAA,kBACG,KAAKJ,KAAL,CAAWC,eAAX,CAA2BsB,GAA3B,CAA+B,CAACd,KAAD,EAAQgB,KAAR,kBAC9B;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,oBACGhB;AADH,WAA8BgB,KAA9B;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cA9BF,eAsCE;AAAA;AAAA;AAAA;AAAA,cAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2CD;;AAtI6B;;AAyIhC,eAAevC,OAAf","sourcesContent":["import wordArray from \"./words\";\nimport React, { Component } from 'react'\nimport './hangman.css'\n\n\nclass Hangman extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      displayedCharacters: [],\n      currentGuess: '',\n      previousGuesses: [],\n      alreadyGuessed: false,\n      theAnswer: \"\",\n      didWin: null,\n      goodGuess: null,\n\n    }\n  }\n  componentDidMount(){\n    let theWord = wordArray[Math.floor(Math.random()*wordArray.length)]\n    this.setState({\n      theAnswer: theWord\n    })\n    let hangmansWordArray = [...(theWord.split(\"\"))].map(value => value = \"_ \")\n    this.setState({\n      displayedCharacters: hangmansWordArray,\n    })\n  }\n\n  getRandomWord = (arr) => {\n    let theWord = arr[Math.floor(Math.random()*wordArray.length)]\n    this.setState({\n      theAnswer: theWord\n    })\n  }\n\n\n  handleSubmit = (e) => {\n    if ((this.state.previousGuesses.includes(this.state.currentGuess)) === false) {\n      this.setState({\n        previousGuesses: [...this.state.previousGuesses, this.state.currentGuess],\n        alreadyGuessed: false\n      })\n    } else {\n      this.setState({alreadyGuessed: true})\n    }\n    this.setState({currentGuess: ''})\n    this.hangmanLogic(this.state.currentGuess)\n    e.preventDefault()\n  }\n\n\n\n  handleChange = (e) => {\n    this.setState({currentGuess: e.target.value})\n    console.log(e.target.value)\n  }\n\n  hangmanLogic = (guess) => {\n    if (guess.toLowerCase() === this.state.theAnswer){\n      this.setState({didWin: true})\n    }\n\n    if (!this.state.displayedCharacters.includes(guess)) {\n      for (let i = 0; i < this.state.theAnswer.length; i++) {\n        if (guess.toLowerCase() === this.state.theAnswer[i]) {\n          let updatedArray = this.state.displayedCharacters\n          updatedArray[i] = guess.toLowerCase()\n          this.setState({\n            displayedCharacters: [...updatedArray],\n            goodGuess: true\n          })\n          console.log(this.state.displayedCharacters);\n        } else {\n          this.setState({\n            goodGuess: false\n          })\n        }\n      }\n    } \n  }\n\n\n  restart = () => {\n    this.componentDidMount()\n    this.setState({\n      previousGuesses: []\n    })\n  }\n\n\n  //           Below this line is the return \n  // -----------------------------------------------------------------\n\n  render() {\n    return (\n      <div>\n         Hey there, you aren't lost are you? Well, if you are, why not play a game?\n         <br/>\n        {this.state.displayedCharacters}\n        <br/>\n        \n        <br/>\n        {/* {this.state.theAnswer} */}\n        \n        <br/>\n        <form onSubmit={this.handleSubmit}>\n          <label>Enter your guess:\n          <input \n            type=\"text\" \n            name=''\n            value={this.state.currentGuess} \n            onChange={this.handleChange}\n          />\n          </label>\n          <input type='submit' />\n        </form>\n\n        \n        <br/>\n        <button onClick={this.restart}>Click here to restart.</button>\n        <br/>\n\n        Your previous Guesses\n        <br/>\n          {this.state.alreadyGuessed ? <p>You already guessed that!</p> : null}\n        <ul>\n          {this.state.previousGuesses.map((value, index) => (\n            <li className='pGuesses' key={index}>\n              {value}\n            </li>\n            ))}\n        </ul>\n\n        <br/>\n        \n      </div>\n    )\n  }\n}\n\nexport default Hangman;"]},"metadata":{},"sourceType":"module"}